---
title: "Text Mining"
---

## Readings

[Welcome to Text Mining with R](https://www.tidytextmining.com)

-   Chapter 1: The tidy text format – Chapter 2: Sentiment analysis with tidy data
-   Chapter 3: Analyzing word and document frequency: tf-idf

## Introduction

Lecturer: Ayoub Bagheri

**What is text mining?**

-   most popular: “The discovery by computer of }new, previously unknown information}, by automatically extracting information from different written resources” (Hearst 1999)
-   Text mining is about looking for *patterns in text*, in a similar way that data mining can be loosely described as looking for patterns in data.
-   Text mining describes a set of linguistic, statistical, and machine learning techniques that model and *structure the information content of textual sources* (Wikipedia)

**Why text mining?**

Text data is everywhere, websites (e.g., news), social media (e.g., twitter), databases (e.g., doctors’ notes), digital scans of printed materials, … - A lot of world’s data is in unstructured text format - Applications in industry: search, machine translation, sentiment analysis, question answering, … - Applications in science: cognitive modeling , understanding bias in language, automated systematic literature reviews, …

**Examples for text mining:**

-   Who was the best friend in Friends?
-   using text mining instead of hand assignment in the automatic detection of ICD10 codes in cardiology discharge letters

**understanding language is difficult!**

(at least half of them are an open problem)

-   Different things can mean more or less the same ( data science ” vs.statistics
-   Context dependency (You have very nice shoes)
-   Same words with different meanings (to sanction)
-   Lexical ambiguity (we saw her duck)
-   Irony, sarcasm (You should swallow disinfectant)
-   Figurative language (He has a heart of stone)
-   Negation (not good ” vs. good ””), spelling variations, jargon, abbreviations
-   All the above is different over languages,99 % of work is on English!

**Key problem**

-   Text, images, videos is unstructured data, not tidy
-   unstructured text: information that either does not have a pre defined data model or is not organized in a pre defined manner.
-   for our analysis we need tidy data
-   each variable is a column, each observation a row, each type of observational unit is a table → table with one-token-per-row
-   token is a meaningful unit of text, such as a word, that we are interested in using for analysis
-   how is data stored in text mining approaches?
-   string, character vectors
-   corpus: contain raw string strings annotated with additional meta data and details
-   document-term matrix: sparse matrix describing a collection (i.e., a corpus) of documents with one row for each document and one column for each term. The value in the matrix is typically word count or tf-idf. In other words: is a mathematical matrix that describes the frequency of terms that occur in a collection of documents
-   → How is it possible to convert this data to structured one?
-   answer: tokenization, the process of splitting text into tokens

## Preprocessing data

-   approach for cleaning and noise removal of text data
-   brings text in analyzable form for statistical learning
-   is useful, because:
-   efficient
-   remove stop words - def: words which are filtered out before or after processing of natural language data (text)
-   reduce noise
-   is tidy and structured
-   dimensionality: words as features in columns
-   memory allocation
-   increase performance

## typical steps

not all of these are appropriate at all times!

-   tokenization Tokenization (“text”, “ming ”, “is”, “the”, “best”, "!")
-   stemming ("lungs" to "lung") or Lemmatization ("were"to "is")
    -   def: the process for reducing inflected (or sometimes derived) words to their word stem, base or root form generally a written word form
-   lowercasing ("Disease" to "disease")
-   stopword removal ("text mining is best!")
-   punctual removal ("text mining is the best")
-   number removal ("I42" to "I")
-   spell correction ("hart" to "heart")

Example for steps, one step behind another with a **Vector Space Model** as a result:

![](figures/9.ex.png){width="490"}

## Vector Space Model

**Basic idea**: Represent the text as something that makes sense to a computer, makes it readable for the computer

-   is a collection of vectors
-   represents documents by concept vectors
-   each concept defines one dimension (one dimension can be one word)
-   k concepts define a high-dimensional space
-   element of vector corresponds to concept weight
-   terms/ words are genereic features that can be extracted from text
-   typically, terms are single words, keywords, n/grams, or phrases
-   documents are represented as vectors of terms
-   each dimension (concept) corresponds to a separate term

$$
d= (w_1, \dots,  w_n)
$$

![](figures/9.ex.png){width="400"}

-   The process of converting text into numbers is called **Vectorization**
-   Distance between the vectors in this concept space illustrate the relationsship between the documents

## Bag-of-Words

How can we convert words in numerical values? You need a vocabulary that works for all articles, so a binary approach!

-   Terms are words (more guenereally we can use n-grams)
-   weights are numbers of occurrences of the terms int eh document
-   binary
-   term frequency (TF)
-   term Frequency inverse Document Frequency (TFiDF)

Looking at all words in all articles and give zeros and ones, if the term occur or not:

![](figures/9.bag.png){width="400"}

### TFiDF

A term is more discriminative if it occurs a lot but only in fewer documents → shows how often the words occur and how important it is!

1.  How often? Let $n_{d,t}$ denote the number of times the t-th term appear in the d-th document

$$
TF_{d,t} = \frac{n_{d,t}}{\sum_{i}n_{d,i}}
$$

2.  how important? Let N denote the number of documents and $N_t$ denote the number of documents containing the t-th term.

$$
IDF_t = log (\frac{N}{N_t})
$$

When a word appears in all of the documents, it cancelled out by how important that is.

And then weight with TFiDF:

$$
w_{d,t} = TF_{d,t} * IDF_t 
$$

## Overview of VSM models

![](figures/9.vsm.png){width="490"}

overview about the method:

three categories of vector space model

1.  bag-of-words\
    We do not care about the order of words, so not about the meaning good to convert to a table high dimensional, high number of zeros (sparse)
2.  topics we expect 10 topics or clusters use these topics as vectors
3.  word embeddings we care about the order and the meaning

## Text classification

-   supervised learning: learning a function that maps an input to an output based on example input-output pairs
    -   infer function from labeled training data
    -   use inferred function to label new instances
-   common: human experts annotate a set of text data as a training set

hand-coded rules

-   rules based on combinations of words or other features
-   accuracy can be high if rules are carefully defined by experts
-   data/domain specific

## Algorithms

-   Naïve Bayes
-   Logistic regression
-   Support vector machines
-   K nearest neighbors
-   Neural networks
-   Deep learning

## Word represenation

-   how can we represent the meaning of words?

Words as vectors:

-   capture semantics:

-   similar words should be close to each other in the vector space

-   relation between two vectors should reflect the relationship between the two words

-   be efficient, because smaller number of vectors and dimensions

-   be interpretable

## in R

```         
## libraries
library(tidytext)
library(RColorBrewer)
library(gutenbergr)
library(SnowballC)
library(wordcloud)
library(textdata)
library(tm)
library(NLP)
library(stringi)
library(e1071)
library(rpart)
library(caret)

## Preprocessing tidy data apporoach
  #each line get a number and each chapter reference a number, too in the book Alice in Wonderland
tidy_AAIWL <- AAIWL %>%
  mutate(linenumber = row_number(),
         chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
                                                 ignore_case = TRUE))))
## Tokenization, un-nesting Text
  #each word in the column text gets is own row
tidy_AAIWL <- tidy_AAIWL %>% unnest_tokens(word, text)

#count the words
  #from most used descending 
tidy_AAIWL.count <- tidy_AAIWL %>% count(word, sort=TRUE)

#remove stopwords
data("stop_words")
tidy_AAIWL.stop <- tidy_AAIWL %>% anti_join(stop_words)

#create a word cloud out of it
tidy_AAIWL.count %>% with(wordcloud(word, n, max.words = 100))                                        

#Vector Space Model
  #set the seed to make your partition reproducible
set.seed(123)

df_final$Content <- iconv(df_final$Content, from = "UTF-8", to = "ASCII", sub = "")

  #for documenttermmatrix we need a corpus format, a list ot content and the meta data 
docs <- Corpus(VectorSource(df_final$Content)) 

  ## alter the code from here onwards
dtm <- DocumentTermMatrix(docs,
                          control = list(stopwords= TRUE, 
                                        removeNumbers=TRUE,
                                        removePunctuation=TRUE,
                                        whitespace_tokenizer=TRUE,
                                        tolower=TRUE))  #lower case

view(dtm)
  #in the rows are the entries, in the columns the frequency of a word

  ## we are not interested in all the words, we are only interested in words that are more ofte used than 10 times
not.freq <- findFreqTerms(dtm, lowfreq=11) 
  #run again 
dtm <- DocumentTermMatrix(docs,
                          control = list(stopwords= TRUE, 
                                        removeNumbers=TRUE,
                                        removePunctuation=TRUE,
                                        whitespace_tokenizer=TRUE,
                                        tolower=TRUE,
                                        dictionary = not.freq))  #lower case
   ## define the training partition 
train_index <- createDataPartition(df_final$Category, p = .8,  #category because outcome variable
                                  list = FALSE, 
                                  times = 1)

  ## split the data using the training partition to obtain training data
df_train <- df_final[train_index,]

  ## remainder of the split is the validation and test data (still) combined 
df_test <- df_final[-train_index,] 

df_train$Content <- iconv(df_train$Content, from = "UTF-8", to = "ASCII", sub = "")
df_test$Content <- iconv(df_test$Content, from = "UTF-8", to = "ASCII", sub = "")

docs_train <- Corpus(VectorSource(df_train$Category)) 
docs_test <- Corpus(VectorSource(df_test$Category)) 

## alter the code from here onwards
dtm_train <- DocumentTermMatrix(docs_train,
                          control = list(stopwords= TRUE, 
                                        removeNumbers=TRUE,
                                        removePunctuation=TRUE,
                                        whitespace_tokenizer=TRUE,
                                        tolower=TRUE,
                                        dictionary= not.freq))  

## alter the code from here onwards
dtm_test <- DocumentTermMatrix(docs_test,
                          control = list(stopwords= TRUE, 
                                        removeNumbers=TRUE,
                                        removePunctuation=TRUE,
                                        whitespace_tokenizer=TRUE,
                                        tolower=TRUE,
                                        dictionary= not.freq))  

#make a data frame 
dtm_train  <- as.data.frame(as.matrix(dtm_train))
dtm_test  <- as.data.frame(as.matrix(dtm_test))

#now you can run a decision tree on it with
library(rpart)
fit_dt <- rpart(cat~., data = dtm_train, method = 'class')
 
## prediction on training data
pred_train <- predict(fit_dt, dtm_train, type = 'class')
fit_table  <- table(dtm_train$cat, pred_train, dnn = c("Actual", "Predicted"))
fit_table

pred_test       <- predict(fit_dt, dtm_test, type = 'class')
fit_table_test  <- table(dtm_test$cat, pred_test, dnn = c("Actual", "Predicted"))
fit_table_test

## You can use this table to calculate Accuracy, Sensitivity, Specificity, Pos Pred Value, and Neg Pred Value. There are also many functions available for this purpose, for example the `confusionMatrix` function from the `caret` package.
```

During this practical, we will cover an introduction to text mining. Topics covered are how to pre-process mined text (in both the tidy approach and using the `tm` package), different ways to visualize this the mined text, creating a document-term matrix and an introduction to one type of analysis you can conduct during text mining: text classification. As a whole, there are multiple ways to analysis mine & analyze text within `R`. However, for this practical we will discuss some of the techniques covered in the `tm` package and in the `tidytext` package, based upon the `tidyverse`.

You can download the student zip including all needed files for practical 9 [here](https://surfdrive.surf.nl/files/index.php/s/J58fxg4AkOSKTcK). In addition, for this practical, you will need the following packages:

```{r packages, message = FALSE, warning = FALSE, error = FALSE}
## General Packages
library(tidyverse)

## Text Mining
library(magrittr)
library(tidytext)
library(RColorBrewer)
library(gutenbergr)
library(SnowballC)
library(wordcloud)
library(textdata)
library(tm)
library(NLP)
library(stringi)
library(e1071)
library(rpart)
library(caret)
```

For the first part of the practical, we will be using text mined through the [Gutenberg Project](https://www.gutenberg.org/wiki/Main_Page); briefly this project contains over 60,000 freely accessible eBooks, which through the package `gutenberger`, can be easily accessed and perfect for text mining and analysis.

We will be looking at several books from the late 1800s, in the mindset to compare and contrast the use of language within them. These books include:

-   *Alice's Adventures in Wonderland by Lewis Carroll*
-   *The Strange Case of Dr. Jekyll and Mr. Hyde by Robert Louis Stevenson*

Despite being from the late 1800s, these books still are popular and hold cultural significance in TV, Movies and the English Language. To access this novel suitable for this practical the following function should be used:

```{r, message = FALSE}
AAIWL <- gutenberg_download(28885) ## 28885 is the eBook number of Alice in Wonderland
SCJH  <- gutenberg_download(43)    ## 43 is the eBook number of Dr. Jekyll and Mr. Hyde

```

After having loaded all of these books into your working directory (using the code above), examine one of these books using the `View()` function. When you view any of these data frames, you will see that these have an extremely *messy* layout and structure. As a result of this complex structure means that conducting *any* analysis would be extremely challenging, so pre-processing must be undertaken to get this into a format which is usable.

### Pre-Processing Text: Tidy approach

In order for text to be used effectively within statistical processing and analysis; it must be pre-processed so that it can be uniformly examined. Typical steps of pre-processing include:

-   Removing numbers
-   Converting to lowercase
-   Removing stop words
-   Removing punctuation
-   Stemming

These steps are important as they allow the text to be presented uniformly for analysis (but remember we do not always need all of them); within this practical we will discuss how to undergo some of these steps.

### Step 1: Tokenization, un-nesting Text

When we previously looked at this text, as we discovered it was extremely *messy* with it being attached one line per row in the data frame. As such, it is important to un-nest this text so that it attaches one word per row.

Before un-nesting text, it is useful to make a note of aspects such as the line which text is on, and the chapter each line falls within. This can be important when examining anthologies or making chapter comparisons as this can be specified within the analysis.

In order to specify the line number and chapter of the text, it is possible to use the `mutuate` function from the `dplyr` package.

1.  **Apply the code below, which uses the `mutate` function, to add line numbers and chapter references one of the books. Next, use the `View()` function to examine how this has changed the structure.**

```{r}
## Template:
tidy_AAIWL <- AAIWL %>%
  mutate(linenumber = row_number(),
         chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
                                                 ignore_case = TRUE))))

tidy_SCJH <- SCJH  %>%
  mutate(linenumber = row_number(),
         chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
                                                 ignore_case = TRUE))))
```

\`

From this, it is now possible to pass the function `unnest_tokens()` in order to split apart the sentence string, and apply each word to a new line. When using this function, you simply need to pass the arguments, `word` (as this is what you want selecting) and `text` (the name of the column you want to unnest).

The two basic arguments to unnest_tokens used here are column names. First we have the output column name that will be created as the text is unnested into it (word, in this case), and then the input column that the text comes from (text, in this case). Remember that text_df above has a column called text that contains the data of interest.

After using unnest_tokens, we’ve split each row so that there is one token (word) in each row of the new data frame; the default tokenization in unnest_tokens() is for single words, as shown here. Also notice:

Other columns, such as the line number each word came from, are retained. Punctuation has been stripped. By default, unnest_tokens() converts the tokens to lowercase, which makes them easier to compare or combine with other datasets. (Use the to_lower = FALSE argument to turn off this behavior).

2.  **Apply unnest_tokens to your tidied book to unnest this text. Next, once again use the `View()` function to examine the output.**

*Hint*: As with Question 1, ensure to use the piping operator (`%>%`) to easily apply the function.

```{r}
tidy_AAIWL <- tidy_AAIWL %>% unnest_tokens(word, text)

tidy_SCJH <- tidy_SCJH %>% unnest_tokens(word, text)
```

This results in one word being linked per row of the data frame. The benefit of using the `tidytext` package in comparison to other text mining packages, is that this automatically applies some of the basic steps to pre-process your text, including removing of capital letters, inter-word punctuation and numbers. However additional pre-processing is required.

### Intermezzo: Word clouds

Before continuing the pre-processing process, let's have a first look at our text by making a simple visualization using word clouds. Typically these word clouds visualize the frequency of words in a text through relating the size of the displayed words to frequency, with the largest words indicating the most common words.

To plot word clouds, we first have to create a data frame containing the word frequencies.

3.  **Create a new data frame, which contains the frequencies of words from the unnested text. To do this, you can make use of the function `count()`.**

*Hint*: As with Question 1, ensure to use the piping operator (`%>%`) to easily apply the function.

```{r}
tidy_AAIWL.count <- tidy_AAIWL %>% count(word, sort=TRUE)

tidy_SCJH.count <- tidy_SCJH %>% count(word, sort=TRUE)
```

4.  **Using the `wordcloud()` function, create a word cloud for your book text. Use the argument `max.words` within the function to set the maximum number of words to be displayed in the word cloud.**

*Hint*: As with Question 1, ensure to use the piping operator (`%>%`) to easily apply the function. *Note*: Ensure to use the function `with()`, is used after the piping operator.

```{r}
tidy_AAIWL.count %>% with(wordcloud(word, n, max.words = 100))
tidy_SCJH.count %>% with(wordcloud(word, n, max.words = 100))
```

5.  **Discuss with another individual or group, whether you can tell what text each word clouds come from, based on the popular words which occur.**

### Step 2: Removing stop words

As discussed within the lecture, stop words are words in any language which have little or no meaning, and simply connect the words of importance. Such as *the*, *a*, *also*, *as*, *were*... etc. To understand the importance of removing these stop words, we can simply do a comparison between the text which has had them removed and those which have not been.

To remove the stop words, we use the function `anti_join()`. This function works through *un-joining* this table based upon the components, which when passed with the argument `stop_words`, which is a table containing these words across three lexicons. This removes all the stop words from the presented data frame.

6.  **Use the function `anti_join()` to remove stop words from your tidied text attaching it to a new data frame.**

*Hint*: As with Question 1, ensure to use the piping operator (`%>%`) to easily apply the function.

```{r}
data("stop_words")
tidy_AAIWL.stop <- tidy_AAIWL %>% anti_join(stop_words)
tidy_SCJH.stop <- tidy_SCJH %>% anti_join(stop_words)
```

In order to examine the impact of removing these filler words, we can use the `count()` function to examine the frequencies of different words. This when sorted, will produce a table of frequencies in descending order. An other option is to redo the wordclouds on the updated data frame containing the word counts of the tidied book text without stop words.

7.  **Use the function `count()` to compare the frequencies of words in the dataframes containing the tidied book text with and without stop words (use `sort = TRUE` within the `count()` function), or redo the wordclouds. Do you notice a difference in the (top 10) words which most commonly occur in the text?**

*Hint*: As with Question 1, ensure to use the piping operator (`%>%`) to easily apply the function.

```{r}
tidy_AAIWL.count <- tidy_AAIWL.stop %>% count(word, sort=TRUE)
tidy_AAIWL.count %>% with(wordcloud(word, n, max.words = 100))
```

## Vector space model: document-term matrix

In this part of the practical we will build a text classification model for a multiclass classification task. To this end, we first need to perform text preprocessing, then using the idea of vector space model, convert the text data into a document-term (dtm) matrix, and finally train a classifier on the dtm matrix.

The data set used in this part of the practical is the BBC News data set. You can use the provided "news_dataset.rda" for this purpose. <!-- The raw data set can also be downloaded from [here](http://mlg.ucd.ie/datasets/bbc.html). --> This data set consists of 2225 documents from the BBC news website corresponding to stories in five topical areas from 2004 to 2005. These areas are:

-   Business
-   Entertainment
-   Politics
-   Sport
-   Tech

8.  **Use the code below to load the data set and inspect its first rows.**

```{r 1}
load("data/news_dataset.rda")
head(df_final)

```

9.  **Find out about the name of the categories and the number of observations in each of them.**

```{r 2}
t_category <- table(df_final$Category)
```

```{r}
t_name <- table(df_final$File_Name)
```

10. **Convert the data set into a document-term matrix using the function `DocumentTermMatrix()` and subsequently use the `findFreqTerms()` function to keep the terms which their frequency is larger than 10. A start of the code is given below. It is also a good idea to apply some text preprocessing, for this inspect the `control` argument of the function `DocumentTermMatrix()` (e.g., convert the words into lowercase, remove punctuations, numbers, stopwords, and whitespaces).**

```{r 3example, evaluate = FALSE}
### set the seed to make your partition reproducible
set.seed(123)

df_final$Content <- iconv(df_final$Content, from = "UTF-8", to = "ASCII", sub = "")

docs <- Corpus(VectorSource(df_final$Content)) #for documenttermmatrix we need a corpus format, a list ot content and the meta data 

## alter the code from here onwards
dtm <- DocumentTermMatrix(docs,
                          control = list(stopwords= TRUE, 
                                        removeNumbers=TRUE,
                                        removePunctuation=TRUE,
                                        whitespace_tokenizer=TRUE,
                                        tolower=TRUE))  #lower case

  #in the rows are the entries, in the columns the frequency of a word

```

```{r 3}
not.freq <- findFreqTerms(dtm, lowfreq=11) ## we are not interested in all the words, we are only interested in words that are used more than 10 times
dtm <- DocumentTermMatrix(docs,
                          control = list(stopwords= TRUE, 
                                        removeNumbers=TRUE,
                                        removePunctuation=TRUE,
                                        whitespace_tokenizer=TRUE,
                                        tolower=TRUE,
                                        dictionary = not.freq))  #lower case
```

11. **Partition the original data into training and test sets with 80% for training and 20% for test.**

```{r 4}
## define the training partition 
train_index <- createDataPartition(df_final$Category, p = .8,  #category because outcome variable
                                  list = FALSE, 
                                  times = 1)

## split the data using the training partition to obtain training data
df_train <- df_final[train_index,]

## remainder of the split is the validation and test data (still) combined 
df_test <- df_final[-train_index,]

```

12. **Create separate document-term matrices for the training and the test sets using the previous frequent terms as the input dictionary and convert them into data frames.**

```{r 5}
df_train$Content <- iconv(df_train$Content, from = "UTF-8", to = "ASCII", sub = "")
df_test$Content <- iconv(df_test$Content, from = "UTF-8", to = "ASCII", sub = "")

docs_train <- Corpus(VectorSource(df_train$Category)) 
docs_test <- Corpus(VectorSource(df_test$Category)) 




## alter the code from here onwards
dtm_train <- DocumentTermMatrix(docs_train,
                          control = list(stopwords= TRUE, 
                                        removeNumbers=TRUE,
                                        removePunctuation=TRUE,
                                        whitespace_tokenizer=TRUE,
                                        tolower=TRUE,
                                        dictionary= not.freq))  

## alter the code from here onwards
dtm_test <- DocumentTermMatrix(docs_test,
                          control = list(stopwords= TRUE, 
                                        removeNumbers=TRUE,
                                        removePunctuation=TRUE,
                                        whitespace_tokenizer=TRUE,
                                        tolower=TRUE,
                                        dictionary= not.freq))  

#make a data frame 
dtm_train  <- as.data.frame(as.matrix(dtm_train))
dtm_test  <- as.data.frame(as.matrix(dtm_test))
```

13. **Use the `cbind` function to add the categories to the train_dtm data and name the column y.**

```{r 6}
y <- df_train$Category
dtm_train <- cbind(dtm_train,y)
table(dtm_train[5,6216])
```
